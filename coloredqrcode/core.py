"""Core functionality for QR code generation and decoding."""
from typing import Optional, Union

import numpy as np
import numpy.typing as npt
from PIL import Image
from qrcode import QRCode

from .error_correction import auto_select_error_correction, get_max_bytes
from .exceptions import QRCodeDataTooLongError
from .image_processing import (
    postprocess_colored_qr,
    postprocess_colored_qr_im,
    preprocess_simple_qr,
    preprocess_colored_qr,
    preprocess_colored_qr_im,
)
from .qr_processing import decode_qr_parts, encode_qr_parts

NDArray = npt.NDArray[np.uint8]

# =====================
# Public API functions
# =====================


def generate_qr_code(
    data: str,
    output_path: Optional[str] = None,
    box_size: int = 10,
    border: int = 4,
) -> Image.Image:
    """
    Generates a QR code image from the input data and optionally saves it to output_path.
    Auto-selects the highest possible error correction level for the data length.
    Raises QRCodeDataTooLongError if the data is too long for a QR code.
    Returns a PIL Image object.
    Example:
        img = generate_qr_code('Hello World', output_path='qrcode.png')
    """
    from .qr_processing import create_basic_qr_code
    img = create_basic_qr_code(data, box_size=box_size, border=border)
    
    if output_path:
        img.save(output_path)
    return img


def generate_colored_qr_code(
    data: str,
    output_path: Optional[str] = None,
    box_size: int = 10,
    border: int = 4,
    pad_char: str = "\0",
) -> Image.Image:
    """
    Generates a colored QR code by splitting the data into 3 pieces, encoding each as a QR code,
    coloring each channel, and merging into a single RGB image.
    """
    return encode_qr_parts(
        data,
        n_parts=3,
        postprocess=postprocess_colored_qr,
        output_path=output_path,
        box_size=box_size,
        border=border,
        pad_char=pad_char,
    )


def generate_colored_qr_code_im(
    data: str,
    output_path: Optional[str] = None,
    box_size: int = 10,
    border: int = 4,
    pad_char: str = "\0",
) -> Image.Image:
    """
    Generates a colored QR code with Intensity Modulation (IM) to double data density per RGB channel.
    """
    return encode_qr_parts(
        data,
        n_parts=6,
        postprocess=postprocess_colored_qr_im,
        output_path=output_path,
        box_size=box_size,
        border=border,
        pad_char=pad_char,
    )


# Refactor public decoding functions to use the helper


def decode_qr_code(image: Union[str, Image.Image, np.ndarray]) -> Optional[str]:
    """
    Decodes a standard QR code from the given image and returns the decoded string, or None if not found.
    """
    try:
        return decode_qr_parts(image, preprocess_simple_qr)
    except ValueError:
        return None


def decode_colored_qr_code(
    image: Union[str, Image.Image, np.ndarray], pad_char: str = "\0"
) -> str:
    """
    Decodes a colored QR code generated by generate_colored_qr_code.
    """
    return decode_qr_parts(image, preprocess_colored_qr, pad_char=pad_char)


def decode_colored_qr_code_im(
    image: Union[str, Image.Image, np.ndarray], pad_char: str = "\0"
) -> str:
    """
    Decodes a colored QR code generated by generate_colored_qr_code_im.
    """
    return decode_qr_parts(image, preprocess_colored_qr_im, pad_char=pad_char)
