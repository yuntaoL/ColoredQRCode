"""Core functionality for QR code generation and decoding."""

from typing import Optional, Union

# Third-party imports
import numpy as np
import numpy.typing as npt
from PIL import Image

# Local imports
from .exceptions import QRCodeDataTooLongError
from .image_processing import (
    postprocess_colored_qr,
    postprocess_colored_qr_im,
    preprocess_colored_qr,
    preprocess_colored_qr_im,
)
from .qr_processing import decode_qr_parts, encode_qr_parts
from .utils import load_image_for_decode

NDArray = npt.NDArray[np.uint8]


def generate_qr_code(
    data: str,
    output_path: Optional[str] = None,
    box_size: int = 10,
    border: int = 4,
) -> Image.Image:
    """
    Generates a QR code image from the input data and optionally saves it to output_path.
    Auto-selects the highest possible error correction level for the data length.
    Raises QRCodeDataTooLongError if the data is too long for a QR code.
    Returns a PIL Image object.
    Example:
        img = generate_qr_code('Hello World', output_path='qrcode.png')
    """
    img = encode_qr_parts(
        data,
        n_parts=1,
        postprocess=lambda qr_imgs: qr_imgs[0],
        box_size=box_size,
        border=border,
    )

    if output_path:
        img.save(output_path)
    return img


def generate_colored_qr_code(
    data: str,
    output_path: Optional[str] = None,
    box_size: int = 10,
    border: int = 4,
    pad_char: str = "\0",
) -> Image.Image:
    """
    Generate a colored QR code by splitting the data into 3 RGB channels.

    Args:
        data: The string data to encode in the QR code.
        output_path: Optional path to save the QR code image.
        box_size: Size of each QR code box in pixels.
        border: Width of the QR code border in boxes.
        pad_char: Character used for padding when splitting data.

    Returns:
        PIL Image object containing the colored QR code.

    Raises:
        QRCodeDataTooLongError: If the input data is too long for QR code encoding.
    """
    img = encode_qr_parts(
        data,
        n_parts=3,
        postprocess=postprocess_colored_qr,
        box_size=box_size,
        border=border,
        pad_char=pad_char,
    )

    if output_path:
        img.save(output_path)
    return img


def generate_colored_qr_code_im(
    data: str,
    output_path: Optional[str] = None,
    box_size: int = 10,
    border: int = 4,
    pad_char: str = "\0",
) -> Image.Image:
    """
    Generate a colored QR code with Intensity Modulation (IM).

    IM allows double data density per RGB channel by encoding 2 bits per pixel
    using different intensity levels.

    Args:
        data: The string data to encode in the QR code.
        output_path: Optional path to save the QR code image.
        box_size: Size of each QR code box in pixels.
        border: Width of the QR code border in boxes.
        pad_char: Character used for padding when splitting data.

    Returns:
        PIL Image object containing the intensity-modulated colored QR code.

    Raises:
        QRCodeDataTooLongError: If the input data is too long for QR code encoding.
    """
    img = encode_qr_parts(
        data,
        n_parts=6,
        postprocess=postprocess_colored_qr_im,
        box_size=box_size,
        border=border,
        pad_char=pad_char,
    )

    if output_path:
        img.save(output_path)
    return img


# Refactor public decoding functions to use the helper


def decode_qr_code(image: Union[str, Image.Image, np.ndarray]) -> Optional[str]:
    """
    Decodes a standard QR code from the given image and returns the decoded string, or None if not found.

    Args:
        image: Path to image file, PIL Image object, or numpy array.
    Returns:
        Decoded string from QR code, or None if no QR code found.
    Raises:
        FileNotFoundError: If the image file cannot be found.
        TypeError: If the input type is not supported.
    """
    try:
        img = load_image_for_decode(image)
        return decode_qr_parts(img, lambda img: [img])
    except ValueError:
        return None


def decode_colored_qr_code(
    image: Union[str, Image.Image, np.ndarray], pad_char: str = "\0"
) -> str:
    """
    Decodes a colored QR code generated by generate_colored_qr_code.

    Args:
        image: Path to image file, PIL Image object, or numpy array.
        pad_char: Character used for padding in QR code generation.
    Returns:
        Decoded string from QR code.
    Raises:
        ValueError: If QR code cannot be decoded.
        FileNotFoundError: If the image file cannot be found.
        TypeError: If the input type is not supported.
    """
    img = load_image_for_decode(image)
    return decode_qr_parts(img, preprocess_colored_qr, pad_char=pad_char)


def decode_colored_qr_code_im(
    image: Union[str, Image.Image, np.ndarray], pad_char: str = "\0"
) -> str:
    """
    Decodes a colored QR code generated by generate_colored_qr_code_im.

    Args:
        image: Path to image file, PIL Image object, or numpy array.
        pad_char: Character used for padding in QR code generation.
    Returns:
        Decoded string from QR code.
    Raises:
        ValueError: If QR code cannot be decoded.
        FileNotFoundError: If the image file cannot be found.
        TypeError: If the input type is not supported.
    """
    img = load_image_for_decode(image)
    return decode_qr_parts(img, preprocess_colored_qr_im, pad_char=pad_char)
